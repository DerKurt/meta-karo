commit dfa496c3eb087dab257e0c3e96e90e8a753d73c5
Author: mb-karo <mb@karo-electronics.de>
Date:   Wed Mar 25 14:19:57 2020 +0100

    fec enet reset fixes

diff --git a/drivers/net/ethernet/freescale/fec.h b/drivers/net/ethernet/freescale/fec.h
index f79e57f..893f1ff 100644
--- a/drivers/net/ethernet/freescale/fec.h
+++ b/drivers/net/ethernet/freescale/fec.h
@@ -529,6 +529,11 @@ struct fec_enet_private {
 
 	int	dev_id;
 
+	int	reset_gpio;
+	int	phy_reset_duration;
+	int	phy_post_delay;
+	int	reset_active_high;
+
 	/* Phylib and MDIO interface */
 	struct	mii_bus *mii_bus;
 	uint	phy_speed;
diff --git a/drivers/net/ethernet/freescale/fec_main.c b/drivers/net/ethernet/freescale/fec_main.c
index 4bb3076..3118e62 100644
--- a/drivers/net/ethernet/freescale/fec_main.c
+++ b/drivers/net/ethernet/freescale/fec_main.c
@@ -1892,6 +1892,8 @@ static int fec_enet_mdio_write(struct mii_bus *bus, int mii_id, int regnum,
 	return ret;
 }
 
+static void fec_reset_phy(struct fec_enet_private *fep);
+
 static int fec_enet_clk_enable(struct net_device *ndev, bool enable)
 {
 	struct fec_enet_private *fep = netdev_priv(ndev);
@@ -1914,9 +1916,13 @@ static int fec_enet_clk_enable(struct net_device *ndev, bool enable)
 			mutex_unlock(&fep->ptp_clk_mutex);
 		}
 
-		ret = clk_prepare_enable(fep->clk_ref);
-		if (ret)
-			goto failed_clk_ref;
+		if (fep->clk_enet_out) {
+			ret = clk_prepare_enable(fep->clk_enet_out);
+			if (ret)
+				goto failed_clk_ptp;
+
+			fec_reset_phy(fep);
+		}
 
 		phy_reset_after_clk_enable(ndev->phydev);
 	} else {
@@ -3280,67 +3286,90 @@ static int fec_enet_init(struct net_device *ndev)
 }
 
 #ifdef CONFIG_OF
-static int fec_reset_phy(struct platform_device *pdev)
+static void fec_reset_phy(struct fec_enet_private *fep)
 {
-	int err, phy_reset;
-	bool active_high = false;
-	int msec = 1, phy_post_delay = 0;
-	struct device_node *np = pdev->dev.of_node;
+	if (!gpio_is_valid(fep->reset_gpio))
+		return;
 
-	if (!np)
-		return 0;
+	gpio_set_value_cansleep(fep->reset_gpio, fep->reset_active_high);
 
-	err = of_property_read_u32(np, "phy-reset-duration", &msec);
-	/* A sane reset duration should not be longer than 1s */
-	if (!err && msec > 1000)
-		msec = 1;
+	if (fep->phy_reset_duration > 20)
+		msleep(fep->phy_reset_duration);
+	else
+		usleep_range(fep->phy_reset_duration * 1000,
+			     fep->phy_reset_duration * 1000 + 1000);
 
-	phy_reset = of_get_named_gpio(np, "phy-reset-gpios", 0);
-	if (phy_reset == -EPROBE_DEFER)
-		return phy_reset;
-	else if (!gpio_is_valid(phy_reset))
-		return 0;
+	gpio_set_value_cansleep(fep->reset_gpio, !fep->reset_active_high);
 
-	err = of_property_read_u32(np, "phy-reset-post-delay", &phy_post_delay);
-	/* valid reset duration should be less than 1s */
-	if (!err && phy_post_delay > 1000)
-		return -EINVAL;
+	if (!fep->phy_post_delay)
+		return;
+	if (fep->phy_post_delay > 20)
+		msleep(fep->phy_post_delay);
+	else
+		usleep_range(fep->phy_post_delay * 1000,
+			     fep->phy_post_delay * 1000 + 1000);
+}
+
+static int fec_get_reset_gpio(struct platform_device *pdev)
+{
+	int err;
+	struct device_node *np = pdev->dev.of_node;
+	struct net_device *ndev = platform_get_drvdata(pdev);
+	struct fec_enet_private *fep = netdev_priv(ndev);
 
-	active_high = of_property_read_bool(np, "phy-reset-active-high");
+	/* Most DT files do not specify the correct polarity
+	 * of the phy-reset GPIO.
+	 * So use this special property to signal the actual
+	 * signal polarity.
+	 */
+	fep->reset_gpio = of_get_named_gpio(np, "phy-reset-gpios", 0);
+	if (fep->reset_gpio == -EPROBE_DEFER)
+		return -EPROBE_DEFER;
+	if (!gpio_is_valid(fep->reset_gpio))
+		return 0;
+
+	fep->reset_active_high = of_property_read_bool(np,
+						       "phy-reset-active-high");
 
-	err = devm_gpio_request_one(&pdev->dev, phy_reset,
-			active_high ? GPIOF_OUT_INIT_HIGH : GPIOF_OUT_INIT_LOW,
-			"phy-reset");
+	err = devm_gpio_request_one(&pdev->dev, fep->reset_gpio,
+				    fep->reset_active_high ?
+				    GPIOF_OUT_INIT_LOW : GPIOF_OUT_INIT_HIGH,
+				    "phy-reset");
 	if (err) {
 		dev_err(&pdev->dev, "failed to get phy-reset-gpios: %d\n", err);
 		return err;
 	}
 
-	if (msec > 20)
-		msleep(msec);
-	else
-		usleep_range(msec * 1000, msec * 1000 + 1000);
-
-	gpio_set_value_cansleep(phy_reset, !active_high);
-
-	if (!phy_post_delay)
-		return 0;
+	err = of_property_read_u32(np, "phy-reset-duration",
+				   &fep->phy_reset_duration);
+	/* A sane reset duration should not be longer than 1s */
+	if (err || fep->phy_reset_duration > 1000)
+		fep->phy_reset_duration = 1;
 
-	if (phy_post_delay > 20)
-		msleep(phy_post_delay);
-	else
-		usleep_range(phy_post_delay * 1000,
-			     phy_post_delay * 1000 + 1000);
+	err = of_property_read_u32(np, "phy-reset-post-delay",
+				   &fep->phy_post_delay);
+	/* valid post reset delay should be less than 1s */
+	if (err)
+		fep->phy_post_delay = 0;
+	else if (fep->phy_post_delay > 1000)
+		return -EINVAL;
 
 	return 0;
 }
 #else /* CONFIG_OF */
-static int fec_reset_phy(struct platform_device *pdev)
+/* In case of platform probe, the reset has been done
+ * by machine code.
+ */
+static inline void fec_reset_phy(struct fec_enet_private *fep){
+
+}
+
+static int fec_get_reset_gpio(struct platform_device *pdev)
 {
-	/*
-	 * In case of platform probe, the reset has been done
-	 * by machine code.
-	 */
+	struct net_device *ndev = platform_get_drvdata(pdev);
+	struct fec_enet_private *fep = netdev_priv(ndev);
+
+	fep->reset_gpio = -EINVAL;
 	return 0;
 }
 #endif /* CONFIG_OF */
@@ -3544,10 +3573,10 @@ fec_probe(struct platform_device *pdev)
 	pm_runtime_set_active(&pdev->dev);
 	pm_runtime_enable(&pdev->dev);
 
-	ret = fec_reset_phy(pdev);
+	ret = fec_get_reset_gpio(pdev);
 	if (ret)
 		goto failed_reset;
-
+	fec_reset_phy(fep);
 	irq_cnt = fec_enet_get_irq_cnt(pdev);
 	if (fep->bufdesc_ex)
 		fec_ptp_init(pdev, irq_cnt);
